// T·∫°o s·ª± ki·ªán gi·∫£ l·∫≠p PayPal thanh to√°n th√†nh c√¥ng
document.getElementById("createOrderBtn").addEventListener("click", async () => {
    try {
      console.log("üîÑ Gi·∫£ l·∫≠p PayPal thanh to√°n th√†nh c√¥ng...");

      // Ki·ªÉm tra PayPal integration ƒë√£ s·∫µn s√†ng ch∆∞a
      if (!window.paypalIntegration) {
        throw new Error("PayPal integration ch∆∞a ƒë∆∞·ª£c t·∫£i. Vui l√≤ng ƒë·ª£i trang load xong.");
      }

      // Ki·ªÉm tra method simulatePaymentSuccess c√≥ t·ªìn t·∫°i kh√¥ng
      if (!window.paypalIntegration.simulatePaymentSuccess) {
        throw new Error("Method simulatePaymentSuccess kh√¥ng t√¨m th·∫•y. C√≥ th·ªÉ c·∫ßn reload trang.");
      }

      // T·∫°o fake PayPal order data
      const fakePayPalOrder = {
        id: "TEST_ORDER_" + Date.now(),
        purchase_units: [{
          payments: {
            captures: [{
              id: "TEST_CAPTURE_" + Date.now(),
              amount: { value: "25.00" }
            }]
          },
          amount: { value: "25.00" }
        }],
        payer: {
          email_address: "test@example.com",
          name: {
            given_name: "Test",
            surname: "User"
          }
        }
      };

      // G·ªçi PayPal integration ƒë·ªÉ x·ª≠ l√Ω nh∆∞ thanh to√°n th·∫≠t
      await window.paypalIntegration.simulatePaymentSuccess(fakePayPalOrder);

    } catch (err) {
      console.error("‚ùå L·ªói khi gi·∫£ l·∫≠p thanh to√°n:", err);
      alert("‚ùå C√≥ l·ªói khi gi·∫£ l·∫≠p thanh to√°n: " + err.message);
    }
  });
  