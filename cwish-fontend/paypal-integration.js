// PayPal Integration for T-shirt Store
class PayPalIntegration {
    constructor() {
        // *** Live Andreas account
        // this.paypalClientId = 'ENaMSdvm4ATz6XfV7r9r_5mGNf3EmHiiKDc2XcfLtJe8t21DAtzBuA86TuuZ5AXcwpFFdbYsCi0y85Kd'; // Thay th·∫ø b·∫±ng Client ID th·ª±c t·∫ø
        // *** Sandbox Thi account
        this.paypalClientId = 'AUTJCGZY2VvXmJIqCJ7kFO5DD_ESho40dm95S1XKJolyryezuz9XQJgFrKCDsR1YLUvWTItMq7B_jRVG'; // Thay th·∫ø b·∫±ng Client ID th·ª±c t·∫ø
        this.environment = 'sandbox'; // 'sandbox' cho testing, 'production' cho live
        this.isTestMode = false; // Flag ƒë·ªÉ track test mode
        this.init();
    }

    init() {
        // Load PayPal SDK
        this.loadPayPalSDK();

        // PayPal Integration ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o
    }

    loadPayPalSDK() {
        // Ki·ªÉm tra xem PayPal SDK ƒë√£ ƒë∆∞·ª£c load ch∆∞a
        if (window.paypal) {
            this.setupPayPal();
            return;
        }

        // Load PayPal SDK
        const script = document.createElement('script');
        script.src = `https://www.paypal.com/sdk/js?client-id=${this.paypalClientId}&currency=USD&intent=capture`;
        script.onload = () => {
            this.setupPayPal();
        };
        script.onerror = (error) => {
            console.error('Failed to load PayPal SDK:', error);
            this.showPayPalError();
        };
        document.head.appendChild(script);
    }

    setupPayPal() {
        if (!window.paypal) {
            console.error('PayPal SDK not available');
            return;
        }

        console.log('PayPal SDK loaded successfully');

        // T·∫°o PayPal buttons
        this.createPayPalButtons();
    }

    createPayPalButtons() {
        const paypalContainer = document.getElementById('paypal-button-container');
        if (!paypalContainer) {
            console.error('PayPal container not found');
            return;
        }

        console.log('Creating PayPal buttons...');
        paypalContainer.innerHTML = '';

        try {
            const buttons = paypal.Buttons({
                // T·∫°o order
                createOrder: (data, actions) => {
                    console.log('PayPal createOrder called with data:', data);
                    console.log('PayPal createOrder called with actions:', actions);
                    return this.createOrder(actions);
                },

                // X·ª≠ l√Ω khi thanh to√°n th√†nh c√¥ng
                onApprove: (data, actions) => {
                    console.log('PayPal onApprove called with data:', data);
                    console.log('PayPal onApprove called with order ID:', data.orderID);
                    return this.handlePaymentSuccess(data, actions);
                },

                // X·ª≠ l√Ω khi c√≥ l·ªói
                onError: (err) => {
                    console.error('PayPal onError called:', err);
                    this.handlePaymentError(err);
                },

                // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng h·ªßy
                onCancel: (data) => {
                    console.log('PayPal onCancel called:', data);
                    this.handlePaymentCancel(data);
                }
            });

            if (buttons.isEligible()) {
                buttons.render(paypalContainer);
                console.log('PayPal buttons rendered successfully');
            } else {
                console.error('PayPal buttons not eligible for rendering');
                this.showPayPalError('PayPal buttons are not eligible for this transaction');
            }
        } catch (error) {
            console.error('Error rendering PayPal buttons:', error);
            this.showPayPalError();
        }
    }

    async createOrder(actions) {
        try {
            console.log('createOrder method called with actions:', actions);
            console.log('Actions object:', actions);
            console.log('Actions type:', typeof actions);

            // L·∫•y th√¥ng tin gi·ªè h√†ng
            const cartData = this.getCartData();
            if (!cartData || !cartData.items || cartData.items.length === 0) {
                throw new Error('No items in cart');
            }

            console.log('Cart data for order:', cartData);

            // T·∫°o danh s√°ch items cho PayPal
            const items = cartData.items.map(item => ({
                name: item.product.name,
                quantity: item.quantity.toString(),
                unit_amount: {
                    currency_code: 'USD',
                    value: (parseFloat(item.total_price) / item.quantity).toFixed(2)
                }
            }));

            console.log('PayPal items:', items);

            // T√≠nh to√°n t·ªïng ti·ªÅn
            const subtotal = parseFloat(cartData.total_amount);
            const shipping = 5.99;
            const tax = subtotal * 0.08;
            const total = subtotal + shipping + tax;

            console.log('Creating PayPal order with total:', total);

            // T·∫°o order
            const order = await actions.order.create({
                purchase_units: [{
                    amount: {
                        currency_code: 'USD',
                        value: total.toFixed(2),
                        breakdown: {
                            item_total: {
                                currency_code: 'USD',
                                value: subtotal.toFixed(2)
                            },
                            shipping: {
                                currency_code: 'USD',
                                value: shipping.toFixed(2)
                            },
                            tax_total: {
                                currency_code: 'USD',
                                value: tax.toFixed(2)
                            }
                        }
                    },
                    items: items,
                    shipping: {
                        name: {
                            full_name: this.getCustomerName()
                        },
                        address: {
                            address_line_1: document.getElementById('address')?.value || '',
                            admin_area_2: document.getElementById('city')?.value || '',
                            admin_area_1: document.getElementById('state')?.value || '',
                            postal_code: document.getElementById('zipCode')?.value || '',
                            country_code: document.getElementById('country')?.value || 'US'
                        }
                    }
                }],
                application_context: {
                    shipping_preference: 'SET_PROVIDED_ADDRESS',
                    user_action: 'PAY_NOW'
                }
            });

            console.log('PayPal order created successfully:', order);
            console.log('Order ID:', order);
            console.log('Order object type:', typeof order);

            // PayPal SDK returns order ID directly as string, not as object with id property
            if (typeof order === 'string') {
                console.log('Order ID is string:', order);
                if (!order || order.length === 0) {
                    console.error('PayPal order created but order ID is empty string:', order);
                    throw new Error('PayPal order created but order ID is empty');
                }
                return order;
            } else if (typeof order === 'object' && order.id) {
                console.log('Order ID from object:', order.id);
                return order.id;
            } else {
                console.error('PayPal order created but order format is unexpected:', order);
                console.log('Order object keys:', Object.keys(order || {}));
                throw new Error('PayPal order created but order format is unexpected');
            }

        } catch (error) {
            console.error('Error creating PayPal order:', error);
            // Hide loading state on error
            this.hideLoading();

            // Also hide loading from checkout page if available
            if (typeof hideLoading === 'function') {
                hideLoading();
            }

            throw error;
        }
    }

    async handlePaymentSuccess(data, actions) {
        console.log('‚úÖ PayPal handlePaymentSuccess called');
        console.log('üìã Payment data received:', data);

        // Reset all messages to initial state
        this.resetMessages();

        try {
            // Capture payment
            console.log('üîÑ Starting payment capture...');
            const order = await actions.order.capture();
            console.log('‚úÖ Payment captured successfully:', order);

            // Hide loading state
            this.hideLoading();

            // Also hide loading from checkout page if available
            if (typeof hideLoading === 'function') {
                hideLoading();
            }

            // X·ª≠ l√Ω thanh to√°n th√†nh c√¥ng
            console.log('üîÑ Processing successful payment...');
            await this.processSuccessfulPayment(order);

            console.log('‚úÖ processSuccessfulPayment completed, now showing success message...');

            // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
            console.log('üéâ Showing success message...');
            this.showSuccessMessage(order);

            console.log('‚úÖ Payment flow completed successfully');
            return order;

        } catch (error) {
            console.error('‚ùå Error in handlePaymentSuccess:', error);
            console.error('‚ùå Error details:', {
                message: error.message,
                name: error.name,
                stack: error.stack
            });

            this.hideLoading();

            // Check if this is a client ID mismatch error
            if (error.message && error.message.includes('order')) {
                console.error('üö® Possible Client ID mismatch! The Client ID in your code may not match the PayPal account you used to pay.');
                console.error('üí° Solution: Update the paypalClientId in paypal-integration.js to match your sandbox account.');
            }

            this.handlePaymentError(error);
        }
    }

    async processSuccessfulPayment(order) {
        console.log('üöÄ processSuccessfulPayment STARTED');
        console.log('üìã PayPal order object:', order);

        try {
            // L·∫•y th√¥ng tin kh√°ch h√†ng
            const customerData = this.getCustomerData();

            console.log('üìã Customer data for backend:', customerData);
            console.log('‚úÖ Customer data retrieved successfully');

            // T·∫°o order data theo ƒë√∫ng format m√† backend mong ƒë·ª£i
            // Backend OrderCreateSerializer ch·ªâ c·∫ßn: email, first_name, last_name, address, city, country, postal_code, phone
            const orderData = {
                // Th√¥ng tin kh√°ch h√†ng (snake_case nh∆∞ backend mong ƒë·ª£i)
                email: customerData.email,
                first_name: customerData.firstName,  // camelCase ‚Üí snake_case
                last_name: customerData.lastName,    // camelCase ‚Üí snake_case
                address: customerData.address,
                city: customerData.city,
                country: customerData.country,
                postal_code: customerData.zipCode,   // zipCode ‚Üí postal_code
                phone: customerData.phone
            };

            // L∆∞u th√¥ng tin PayPal ri√™ng bi·ªát ƒë·ªÉ debug (backend kh√¥ng l∆∞u)
            const paypalInfo = {
                paypalOrderId: order.id,
                paypalTransactionId: order.purchase_units[0].payments.captures[0].id,
                total: parseFloat(order.purchase_units[0].amount.value),
                paymentMethod: 'PayPal',
                paymentStatus: 'completed',
                orderDate: new Date().toISOString(),
                items: this.getCartData().items,
                paypalData: order
            };

            console.log('üí≥ PayPal transaction details:', paypalInfo);

            console.log('üì§ Sending order data to backend:', orderData);

            // G·ª≠i order ƒë·∫øn backend
            console.log('üîÑ Sending request to backend...');
            const backendResponse = await this.sendOrderToBackend(orderData, this.isTestMode, paypalInfo);
            console.log('‚úÖ Backend response:', backendResponse);

            // L∆∞u order v√†o localStorage (bao g·ªìm c·∫£ th√¥ng tin PayPal)
            this.saveOrderLocally({
                ...orderData,
                ...paypalInfo,
                backendResponse: backendResponse
            });

            // X√≥a gi·ªè h√†ng
            this.clearCart();

            console.log('‚úÖ processSuccessfulPayment COMPLETED SUCCESSFULLY');

        } catch (error) {
            console.error('‚ùå Error in processSuccessfulPayment:', error);
            console.error('‚ùå Error details:', {
                message: error.message,
                name: error.name,
                stack: error.stack
            });
            throw error;
        }
    }

    async sendOrderToBackend(orderData, isTestModeOverride = null, paypalInfo = null) {
        try {
            // Lu√¥n d√πng endpoint production ƒë·ªÉ t·∫°o order th·∫≠t
            const isTestMode = false;
            const endpoint = 'http://localhost:8000/api/orders/';

            console.log(`üì° Using endpoint: ${endpoint} (test mode: ${isTestMode})`);

            console.log(`üì§ Sending request to: ${endpoint}`);
            console.log(`üì¶ Request data:`, orderData);

            // ƒê·∫£m b·∫£o c√≥ CSRF cookie tr∆∞·ªõc khi POST (Django y√™u c·∫ßu khi d√πng session)
            await this.ensureCsrfCookie();

            const csrfToken = this.getCsrfToken();

            const response = await fetch(endpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    // G·ª≠i CSRF token n·∫øu c√≥ (ph√≤ng tr√°nh 403 Forbidden)
                    'X-CSRFToken': csrfToken || ''
                },
                credentials: 'include',
                body: JSON.stringify(orderData)
            });

            console.log(`üì• Response status: ${response.status}`);
            console.log(`üìÑ Response headers:`, [...response.headers.entries()]);
            console.log(`üìä Response ok: ${response.ok}`);

            if (!response.ok) {
                const errorText = await response.text();
                console.error(`‚ùå Backend error response: ${errorText}`);
                throw new Error(`HTTP error! status: ${response.status}, body: ${errorText}`);
            }

            console.log('üîÑ Parsing JSON response...');
            let responseData;
            try {
                const responseText = await response.text();
                console.log('üìÑ Raw response text:', responseText);
                responseData = JSON.parse(responseText);
                console.log('‚úÖ JSON parsed successfully');
            } catch (parseError) {
                console.error('‚ùå JSON parse error:', parseError);
                throw new Error(`JSON parse error: ${parseError.message}`);
            }

            // Log status t·ª´ Shirtigo API ra console
            if (responseData.shirtigo_status) {
                console.log(`üéØ Shirtigo API Status: ${responseData.shirtigo_status}`);
                if (responseData.shirtigo_status === 500) {
                    console.log(`‚ùå Shirtigo API th·∫•t b·∫°i! (ƒê√¢y l√† l·ªói t·ª´ Shirtigo, kh√¥ng ph·∫£i backend c·ªßa ch√∫ng ta)`);
                } else if (responseData.shirtigo_status === 200 || responseData.shirtigo_status === 201) {
                    console.log(`‚úÖ Shirtigo API th√†nh c√¥ng!`);
                }
            }

            console.log(`üìÑ Backend response data:`, responseData);

            // Log ra console ƒë·ªÉ debug
            console.log('üéâ Payment process completed successfully!');
            console.log('üìã Order details:');
            if (paypalInfo) {
                console.log('   - PayPal Order ID:', paypalInfo.paypalOrderId);
                console.log('   - PayPal Transaction ID:', paypalInfo.paypalTransactionId);
                console.log('   - Total Amount:', paypalInfo.total);
            }
            // Customer log removed to avoid referencing undefined variable

            return responseData;

        } catch (error) {
            console.error('Backend not available, storing locally only');
            throw error;
        }
    }

    // -------- CSRF helpers for Django (session-based auth) --------
    getCsrfToken() {
        try {
            const match = document.cookie.match(/(?:^|; )csrftoken=([^;]+)/);
            return match ? decodeURIComponent(match[1]) : null;
        } catch (e) {
            return null;
        }
    }

    async ensureCsrfCookie() {
        try {
            if (this.getCsrfToken()) {
                return;
            }
            // Endpoint c√≥ @ensure_csrf_cookie ƒë·ªÉ set cookie
            await fetch('http://localhost:8000/api/auth/me/', {
                method: 'GET',
                credentials: 'include'
            });
        } catch (e) {
            console.warn('Could not ensure CSRF cookie:', e);
        }
    }

    saveOrderLocally(orderData) {
        try {
            const orders = JSON.parse(localStorage.getItem('orders') || '[]');
            orders.push(orderData);
            localStorage.setItem('orders', JSON.stringify(orders));
        } catch (error) {
            console.error('Error saving order locally:', error);
        }
    }

    // Method gi·∫£ l·∫≠p PayPal thanh to√°n th√†nh c√¥ng (d√πng cho n√∫t test)
    simulatePaymentSuccess = async (fakePayPalOrder) => {
        try {
            // Set test mode flag
            this.isTestMode = true;

            // T·∫°o fake actions object
            const fakeActions = {
                order: {
                    capture: async () => {
                        return fakePayPalOrder;
                    }
                }
            };

            // T·∫°o fake data
            const fakeData = {
                orderID: fakePayPalOrder.id
            };

            // G·ªçi handlePaymentSuccess nh∆∞ PayPal th·∫≠t
            await this.handlePaymentSuccess(fakeData, fakeActions);

            alert("üé≠ ƒê√£ gi·∫£ l·∫≠p thanh to√°n PayPal th√†nh c√¥ng! ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o v√† g·ª≠i ƒë·∫øn Shirtigo.");

        } catch (error) {
            console.error("‚ùå L·ªói khi gi·∫£ l·∫≠p thanh to√°n:", error);
            alert("‚ùå L·ªói khi gi·∫£ l·∫≠p thanh to√°n: " + error.message);
            throw error;
        } finally {
            // Reset test mode flag
            this.isTestMode = false;
        }
    }



    clearCart() {
        try {
            sessionStorage.removeItem('cartData');
            localStorage.removeItem('cartData');
        } catch (error) {
            console.error('Error clearing cart:', error);
        }
    }

    getCartData() {
        try {
            const cartData = sessionStorage.getItem('cartData') || localStorage.getItem('cartData');

            if (cartData) {
                const parsedData = JSON.parse(cartData);
                return parsedData;
            } else {
                return null;
            }
        } catch (error) {
            console.error('Error getting cart data:', error);
            return null;
        }
    }

    getCustomerData() {
        const customerData = {
            firstName: document.getElementById('firstName')?.value || '',
            lastName: document.getElementById('lastName')?.value || '',
            email: document.getElementById('email')?.value || '',
            phone: document.getElementById('phone')?.value || '',
            address: document.getElementById('address')?.value || '',
            city: document.getElementById('city')?.value || '',
            state: document.getElementById('state')?.value || '',
            zipCode: document.getElementById('zipCode')?.value || '',
            country: document.getElementById('country')?.value || '',
            notes: document.getElementById('notes')?.value || ''
        };

        return customerData;
    }

    getCustomerName() {
        const firstName = document.getElementById('firstName')?.value || '';
        const lastName = document.getElementById('lastName')?.value || '';
        const fullName = `${firstName} ${lastName}`.trim();
        console.log('Customer name:', { firstName, lastName, fullName });
        return fullName || 'Customer';
    }

    handlePaymentError(error) {
        console.error('PayPal payment error:', error);
        console.error('Error details:', {
            message: error.message,
            stack: error.stack,
            name: error.name,
            type: typeof error
        });

        // Reset messages to clean state before showing error
        this.resetMessages();

        // Hide loading state
        this.hideLoading();

        // Provide more specific error messages based on error type
        let errorMessage = 'Payment failed. Please try again.';
        if (error.message) {
            if (error.message.includes('order id') || error.message.includes('order ID')) {
                errorMessage = 'Payment failed: Order processing issue. Please try again.';
            } else if (error.message.includes('validation')) {
                errorMessage = 'Payment failed: Please check your information and try again.';
            } else if (error.message.includes('network') || error.message.includes('timeout')) {
                errorMessage = 'Payment failed: Network issue. Please check your connection and try again.';
            } else if (error.message.includes('cart') || error.message.includes('items')) {
                errorMessage = 'Payment failed: Cart issue. Please refresh the page and try again.';
            } else if (error.message.includes('format') || error.message.includes('unexpected')) {
                errorMessage = 'Payment failed: System error. Please try again or contact support.';
            }
        }

        // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
        this.showErrorMessage(errorMessage);

        // Enable l·∫°i n√∫t thanh to√°n
        const paypalButton = document.getElementById('paypalButton');
        if (paypalButton) {
            paypalButton.disabled = false;
        }

        // Also hide loading from checkout page if available
        if (typeof hideLoading === 'function') {
            hideLoading();
        }
    }

    handlePaymentCancel(data) {
        console.log('Payment cancelled by user:', data);

        // Hide loading state
        this.hideLoading();

        // Hi·ªÉn th·ªã th√¥ng b√°o h·ªßy
        this.showCancelMessage('Payment was cancelled.');

        // Enable l·∫°i n√∫t thanh to√°n
        const paypalButton = document.getElementById('paypalButton');
        if (paypalButton) {
            paypalButton.disabled = false;
        }

        // Also hide loading from checkout page if available
        if (typeof hideLoading === 'function') {
            hideLoading();
        }
    }

    resetMessages() {
        console.log('üîÑ Resetting all messages to initial state');

        // Hide error message
        const errorMessage = document.getElementById('errorMessage');
        if (errorMessage) {
            errorMessage.style.display = 'none';
        }

        // Hide success message (let showSuccessMessage handle displaying it)
        const successMessage = document.getElementById('successMessage');
        if (successMessage) {
            successMessage.style.display = 'none';
        }

        // Show checkout content
        const checkoutContent = document.querySelector('.checkout-content');
        if (checkoutContent) {
            checkoutContent.style.display = 'block';
        }

        console.log('‚úÖ All messages reset');
    }

    showSuccessMessage(order) {
        console.log('üéâ showSuccessMessage CALLED with order:', order);

        // ·∫®n error message tr∆∞·ªõc n·∫øu ƒëang hi·ªÉn th·ªã
        const errorMessage = document.getElementById('errorMessage');
        if (errorMessage) {
            errorMessage.style.cssText = 'display: none !important;';
            errorMessage.style.display = 'none';
            console.log('‚úÖ Error message hidden with force');
        }

        // G·ªçi function hideError t·ª´ HTML n·∫øu c√≥
        if (typeof hideError === 'function') {
            hideError();
            console.log('‚úÖ hideError function called');
        }

        // ·∫®n checkout content
        const checkoutContent = document.querySelector('.checkout-content');
        console.log('üìã Checkout content element:', checkoutContent);
        if (checkoutContent) {
            checkoutContent.style.display = 'none';
            console.log('‚úÖ Checkout content hidden');
        }

        // Hi·ªÉn th·ªã success message
        const successMessage = document.getElementById('successMessage');
        console.log('üìã Success message element:', successMessage);
        if (successMessage) {
            // Force hi·ªÉn th·ªã success message v·ªõi !important style
            successMessage.style.cssText = 'display: block !important;';
            successMessage.style.display = 'block';
            console.log('‚úÖ Success message displayed with force');

            // C·∫≠p nh·∫≠t order ID
            const orderIdElement = document.getElementById('orderId');
            if (orderIdElement) {
                orderIdElement.textContent = order.id;
            }
        }
    }

    showErrorMessage(message) {
        // T·∫°o notification
        this.showNotification(message, 'error');

        // Also show error in checkout page if available
        if (typeof showError === 'function') {
            showError(message);
        }
    }

    showCancelMessage(message) {
        // T·∫°o notification
        this.showNotification(message, 'warning');
    }

    showPayPalError(message = 'Failed to load PayPal. Please refresh the page.') {
        this.showNotification(message, 'error');
    }

    hideLoading() {
        const loading = document.getElementById('loading');
        if (loading) {
            loading.style.display = 'none';
        }
    }

    showNotification(message, type = 'info') {
        // T·∫°o notification element
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.textContent = message;

        // Style cho notification
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 5px;
            color: white;
            font-weight: bold;
            z-index: 10000;
            animation: slideIn 0.3s ease-out;
        `;

        // M√†u s·∫Øc theo type
        if (type === 'success') {
            notification.style.backgroundColor = '#4CAF50';
        } else if (type === 'error') {
            notification.style.backgroundColor = '#f44336';
        } else if (type === 'warning') {
            notification.style.backgroundColor = '#ff9800';
        } else {
            notification.style.backgroundColor = '#2196F3';
        }

        // Th√™m CSS animation
        if (!document.querySelector('#notification-styles')) {
            const style = document.createElement('style');
            style.id = 'notification-styles';
            style.textContent = `
                @keyframes slideIn {
                    from { transform: translateX(100%); opacity: 0; }
                    to { transform: translateX(0); opacity: 1; }
                }
            `;
            document.head.appendChild(style);
        }

        // Th√™m v√†o DOM
        document.body.appendChild(notification);

        // T·ª± ƒë·ªông x√≥a sau 5 gi√¢y
        setTimeout(() => {
            notification.remove();
        }, 5000);
    }
}

// Kh·ªüi t·∫°o PayPal Integration khi DOM load xong
document.addEventListener('DOMContentLoaded', function () {
    // Ch·ªâ kh·ªüi t·∫°o PayPal n·∫øu ƒëang ·ªü trang checkout
    if (window.location.pathname.includes('checkout.html')) {
        console.log('Initializing PayPal Integration...');
        window.paypalIntegration = new PayPalIntegration();
    }
});

// Export cho vi·ªác s·ª≠ d·ª•ng trong c√°c file kh√°c
if (typeof module !== 'undefined' && module.exports) {
    module.exports = PayPalIntegration;
}
